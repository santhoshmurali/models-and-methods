{
    "collab_server" : "",
    "contents" : "## Author: Rajesh Jakhotia\n## Company Name: K2 Analytics Finishing School Pvt. Ltd\n## Email : ar.jakhotia@k2analytics.co.in\n## Website : k2analytics.co.in\n\n\n## Let us first set the working directory path\n\n#setwd (\"D:/K2Analytics/Datafile/\")\ngetwd()\n\n\n## Building the model using Random Forest\n\n## importing the data\nRFDF.dev <- read.table(\"data/DEV_SAMPLE.csv\", sep = \",\", header = T)\nRFDF.holdout <- read.table(\"data/HOLDOUT_SAMPLE.csv\", sep = \",\", header = T)\nc(nrow(RFDF.dev), nrow(RFDF.holdout))\n(nrow(RFDF.dev)/nrow(RFDF.holdout))\n\n##install.packages(\"randomForest\")\nlibrary(randomForest)\n?randomForest\nView(RFDF.dev)\n## Calling syntax to build the Random Forest\nRF <- randomForest(as.factor(Target) ~ ., data = RFDF.dev[,-1], \n                   ntree=100, mtry = 3, nodesize = 10,\n                   importance=TRUE)\n\n\nprint(RF)\n\n\nplot(RF, main=\"\")\nlegend(\"topright\", c(\"OOB\", \"0\", \"1\"), text.col=1:6, lty=1:3, col=1:3)\ntitle(main=\"Error Rates Random Forest RFDF.dev\")\n\n\nRF$err.rate\n\n## List the importance of the variables.\nimpVar <- round(randomForest::importance(RF), 2)\nimpVar[order(impVar[,3], decreasing=TRUE),]\n\n\n?tuneRF\n## Tuning Random Forest\ntRF <- tuneRF(x = RFDF.dev[,-c(1,2)], \n              y=as.factor(RFDF.dev$Target),\n              mtryStart = 3, \n              ntreeTry=100, \n              stepFactor = 2, \n              improve = 0.001, \n              trace=TRUE, \n              plot = TRUE,\n              doBest = TRUE,\n              nodesize = 100, \n              importance=TRUE\n)\n\ntRF$importance\n\n\nView(RFDF.dev)\n## Scoring syntax\nRFDF.dev$predict.class <- predict(tRF, RFDF.dev, type=\"class\")\nRFDF.dev$predict.score <- predict(tRF, RFDF.dev, type=\"prob\")\nhead(RFDF.dev)\nclass(RFDF.dev$predict.score)\n\n## deciling\n## deciling code\ndecile <- function(x){\n  deciles <- vector(length=10)\n  for (i in seq(0.1,1,.1)){\n    deciles[i*10] <- quantile(x, i, na.rm=T)\n  }\n  return (\n  ifelse(x<deciles[1], 1,\n  ifelse(x<deciles[2], 2,\n  ifelse(x<deciles[3], 3,\n  ifelse(x<deciles[4], 4,\n  ifelse(x<deciles[5], 5,\n  ifelse(x<deciles[6], 6,\n  ifelse(x<deciles[7], 7,\n  ifelse(x<deciles[8], 8,\n  ifelse(x<deciles[9], 9, 10\n  ))))))))))\n}\n\n\nRFDF.dev$deciles <- decile(RFDF.dev$predict.score[,2])\n\n\n#library(data.table)\ntmp_DT = data.table(RFDF.dev)\nrank <- tmp_DT[, list(\n  cnt = length(Target), \n  cnt_resp = sum(Target), \n  cnt_non_resp = sum(Target == 0)) , \n  by=deciles][order(-deciles)]\nrank$rrate <- round (rank$cnt_resp / rank$cnt,2);\nrank$cum_resp <- cumsum(rank$cnt_resp)\nrank$cum_non_resp <- cumsum(rank$cnt_non_resp)\nrank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);\nrank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);\nrank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);\nView(rank)\n\nlibrary(scales)\nrank$rrate <- percent(rank$rrate)\nrank$cum_rel_resp <- percent(rank$cum_rel_resp)\nrank$cum_rel_non_resp <- percent(rank$cum_rel_non_resp)\n\nView(rank)\n\nsum(RFDF.dev$Target) / nrow(RFDF.dev)\n\n\nlibrary(ROCR)\npred <- prediction(RFDF.dev$predict.score[,2], RFDF.dev$Target)\nperf <- performance(pred, \"tpr\", \"fpr\")\nplot(perf)\nKS <- max(attr(perf, 'y.values')[[1]]-attr(perf, 'x.values')[[1]])\nKS\n\n## Area Under Curve\nauc <- performance(pred,\"auc\"); \nauc <- as.numeric(auc@y.values)\nauc\n\n## Gini Coefficient\nlibrary(ineq)\ngini = ineq(RFDF.dev$predict.score[,2], type=\"Gini\")\ngini\n\n## Classification Error\nwith(RFDF.dev, table(Target, predict.class))\n\n\n## Scoring syntax\nRFDF.holdout$predict.class <- predict(tRF, RFDF.holdout, type=\"class\")\nRFDF.holdout$predict.score <- predict(tRF, RFDF.holdout, type=\"prob\")\n\nRFDF.holdout$deciles <- decile(RFDF.holdout$predict.score[,2])\n\ntmp_DT = data.table(RFDF.holdout)\nh_rank <- tmp_DT[, list(\n  cnt = length(Target), \n  cnt_resp = sum(Target), \n  cnt_non_resp = sum(Target == 0)) , \n  by=deciles][order(-deciles)]\nh_rank$rrate <- round (h_rank$cnt_resp / h_rank$cnt,2);\nh_rank$cum_resp <- cumsum(h_rank$cnt_resp)\nh_rank$cum_non_resp <- cumsum(h_rank$cnt_non_resp)\nh_rank$cum_rel_resp <- round(h_rank$cum_resp / sum(h_rank$cnt_resp),2);\nh_rank$cum_rel_non_resp <- round(h_rank$cum_non_resp / sum(h_rank$cnt_non_resp),2);\nh_rank$ks <- abs(h_rank$cum_rel_resp - h_rank$cum_rel_non_resp);\n\n\nlibrary(scales)\nh_rank$rrate <- percent(h_rank$rrate)\nh_rank$cum_rel_resp <- percent(h_rank$cum_rel_resp)\nh_rank$cum_rel_non_resp <- percent(h_rank$cum_rel_non_resp)\n\nView(h_rank)\n",
    "created" : 1495775856664.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2471060687",
    "id" : "DFB8F955",
    "lastKnownWriteTime" : 1495784108,
    "last_content_update" : 1495784108464,
    "path" : "C:/Home/Work/GreatLakes/Data Mining/Neural Nets/In-Class-DMMLAI/Random_Forest.R",
    "project_path" : "Random_Forest.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
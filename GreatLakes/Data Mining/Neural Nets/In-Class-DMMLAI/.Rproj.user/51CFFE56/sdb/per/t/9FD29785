{
    "collab_server" : "",
    "contents" : "## Author: Rajesh Jakhotia\n## Company Name: K2 Analytics Finishing School Pvt. Ltd\n## Email : ar.jakhotia@k2analytics.co.in\n## Website : k2analytics.co.in\n\n## Santhosh\n## Residency - 3\n\n\n## Let us first set the working directory path\n#setwd (\"D:/K2Analytics/Datafile/\")\ngetwd()\n\n\n## Ideally for any modeling you should have Training & Testing dataset\n## Typically you would use sampling strategy\n## However for the Neural Net training I am supplying the Training & Testing data separately\n\n\nnn.dev <- read.table(\"data/DEV_SAMPLE.csv\", sep = \",\", header = T)\nnn.holdout <- read.table(\"data/HOLDOUT_SAMPLE.csv\", sep = \",\", header = T)\n\nView(nn.dev)\n##occ.matrix <- model.matrix(~ Occupation - 1, data = nn.dev)\n##nn.dev <- data.frame(nn.dev, occ.matrix)\n\n##Gender.matrix <- model.matrix(~ Gender - 1, data = nn.dev)\n##nn.dev <- data.frame(nn.dev, Gender.matrix)\n\n\n##occ.matrix <- model.matrix(~ Occupation - 1, data = nn.holdout)\n##nn.holdout <- data.frame(nn.holdout, occ.matrix)\n\n##Gender.matrix <- model.matrix(~ Gender - 1, data = nn.holdout)\n##nn.holdout <- data.frame(nn.holdout, Gender.matrix)\n\nView(nn.holdout)\nc(nrow(nn.dev), nrow(nn.holdout))\nstr(nn.dev)\n\n## Response Rate\nsum(nn.dev$Target) / nrow(nn.dev)\nsum(nn.holdout$Target) / nrow(nn.holdout)\n\n\n## Installing the Neural Net package; \n\n## If already installed do not run the below step\n##install.packages(\"neuralnet\")\n\n\nlibrary(neuralnet)\n?\"neuralnet\"\n\n\nnn1 <- neuralnet(formula = Target ~  Age +  Balance  + SCR +  No_OF_CR_TXNS + Holding_Period , \n                 data = nn.dev, \n                 hidden = 2,\n                 err.fct = \"sse\",\n                 linear.output = FALSE,\n                 lifesign = \"full\",\n                 lifesign.step = 10,\n                 threshold = 0.1,\n                 stepmax = 2000\n                 ##startweights = startweightsObj\n)\n\nplot (nn1)\n\ntable(nn1$net.result)\n\n## Assigning the Probabilities to Dev Sample\nnn.dev$Prob = nn1$net.result[[1]] \n\n## The distribution of the estimated probabilities\nquantile(nn.dev$Prob, c(0,1,5,10,25,50,75,90,95,99,100)/100)\nhist(nn.dev$Prob)\n\n\n\n## deciling code\ndecile <- function(x){\n  deciles <- vector(length=10)\n  for (i in seq(0.1,1,.1)){\n    deciles[i*10] <- quantile(x, i, na.rm=T)\n  }\n  return (\n    ifelse(x<deciles[1], 1,\n    ifelse(x<deciles[2], 2,\n    ifelse(x<deciles[3], 3,\n    ifelse(x<deciles[4], 4,\n    ifelse(x<deciles[5], 5,\n    ifelse(x<deciles[6], 6,\n    ifelse(x<deciles[7], 7,\n    ifelse(x<deciles[8], 8,\n    ifelse(x<deciles[9], 9, 10\n    ))))))))))\n}\n\n## deciling\nnn.dev$deciles <- decile(nn.dev$Prob)\n\n\n## Ranking code\n##install.packages(\"data.table\")\nlibrary(data.table)\nlibrary(scales)\n\ntmp_DT = data.table(nn.dev)\nrank <- tmp_DT[, list(\n  cnt = length(Target), \n  cnt_resp = sum(Target), \n  cnt_non_resp = sum(Target == 0)) , \n  by=deciles][order(-deciles)]\nrank$rrate <- round (rank$cnt_resp / rank$cnt,2);\nrank$cum_resp <- cumsum(rank$cnt_resp)\nrank$cum_non_resp <- cumsum(rank$cnt_non_resp)\nrank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);\nrank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);\nrank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);\nrank$rrate <- percent(rank$rrate)\nrank$cum_rel_resp <- percent(rank$cum_rel_resp)\nrank$cum_rel_non_resp <- percent(rank$cum_rel_non_resp)\n\nView(rank)\n\n\n\n## Rebuilding the model by Scaling the Independent Variables\n\nnn.dev <- read.table(\"data/DEV_SAMPLE.csv\", sep = \",\", header = T)\n## build the neural net model by scaling the variables\nx <- subset(nn.dev, \n            select = c(\"Age\",\"Balance\", \"SCR\", \"No_OF_CR_TXNS\", \"Holding_Period\"\n##,\"OccupationPROF\", \"OccupationSAL\", \"OccupationSELF.EMP\", \"OccupationSENP\",\"GenderF\", \"GenderM\", \"GenderO\"\n                       )\n)\nView(nn.dev)\nnn.devscaled <- scale(x)\nnn.devscaled <- cbind(nn.dev[2], nn.devscaled)\nView(nn.devscaled)\n\nnn2 <- neuralnet(formula = Target ~  Age + Balance  + SCR +  No_OF_CR_TXNS + Holding_Period ,\n      ## + OccupationPROF + OccupationSAL + OccupationSELF.EMP + OccupationSENP + GenderF + GenderM + GenderO,\n                      data = nn.devscaled, \n                      hidden = 3,\n                      err.fct = \"sse\",\n                      linear.output = FALSE,\n                      lifesign = \"full\",\n                      lifesign.step = 1,\n                      threshold = 0.1,\n                      stepmax = 2000\n                    )\n#https://cran.r-project.org/web/packages/neuralnet/neuralnet.pdf\n\n#number of hidden layers is number of times we reduce the variables through squire root.\n\n\nplot(nn2)\n\nnn2$net.result\n\n## Assigning the Probabilities to Dev Sample\nnn.dev$Prob = nn2$net.result[[1]] \n\n\n## The distribution of the estimated probabilities\nquantile(nn.dev$Prob, c(0,1,5,10,25,50,75,90,95,99,100)/100)\nhist(nn.dev$Prob)\nView(nn.dev)\n\n## deciling\nnn.dev$deciles <- decile(nn.dev$Prob)\n\n\n## Ranking code\n##install.packages(\"data.table\")\nlibrary(data.table)\ntmp_DT = data.table(nn.dev)\nrank <- tmp_DT[, list(\n  cnt = length(Target), \n  cnt_resp = sum(Target), \n  cnt_non_resp = sum(Target == 0)) , \n  by=deciles][order(-deciles)]\nrank$rrate <- round (rank$cnt_resp / rank$cnt,2);\nrank$cum_resp <- cumsum(rank$cnt_resp)\nrank$cum_non_resp <- cumsum(rank$cnt_non_resp)\nrank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);\nrank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);\nrank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);\n\n\nlibrary(scales)\nrank$rrate <- percent(rank$rrate)\nrank$cum_rel_resp <- percent(rank$cum_rel_resp)\nrank$cum_rel_non_resp <- percent(rank$cum_rel_non_resp)\n\nView(rank)\n\n\n\n\n\n## Assgining 0 / 1 class based on certain threshold\nnn.dev$Class = ifelse(nn.dev$Prob>0.21,1,0)\nwith( nn.dev, table(Target, as.factor(Class)  ))\n\n## We can use the confusionMatrix function of the caret package \n##install.packages(\"caret\")\nlibrary(caret)\nconfusionMatrix(nn.dev$Target, nn.dev$Class)\n\n\n## Error Computation\nsum((nn.dev$Target - nn.dev$Prob)^2)/2\n\n\n\n\n## Other Model Performance Measures\n##install.packages(\"ROCR\")\nlibrary(ROCR)\nnn.dev$Prob\npred <- prediction(nn.dev$Prob, nn.dev$Target)\nperf <- performance(pred, \"tpr\", \"fpr\")\nplot(perf)\nKS <- max(attr(perf, 'y.values')[[1]]-attr(perf, 'x.values')[[1]])\nauc <- performance(pred,\"auc\"); \nauc <- as.numeric(auc@y.values)\n\n##install.packages(\"ineq\")\nlibrary(ineq)\ngini = ineq(nn.dev$Prob, type=\"Gini\")\n\n\nauc\nKS\ngini\n\n\n\n## Scoring another dataset using the Neural Net Model Object\n## To score we will use the compute function\n?compute\nx <- subset(nn.holdout, \n            select = c(\"Age\",\"Balance\", \"SCR\", \"No_OF_CR_TXNS\", \"Holding_Period\")\n          )\nx.scaled <- scale(x)\ncompute.output = compute(nn2, x.scaled)\nnn.holdout$Predict.score = compute.output$net.result\nView(nn.holdout)\n\n\nquantile(nn.holdout$Predict.score, c(0,1,5,10,25,50,75,90,95,99,100)/100)\nnn.holdout$deciles <- decile(nn.holdout$Predict.score)\n\nlibrary(data.table)\ntmp_DT = data.table(nn.holdout)\nh_rank <- tmp_DT[, list(\n  cnt = length(Target), \n  cnt_resp = sum(Target), \n  cnt_non_resp = sum(Target == 0)) , \n  by=deciles][order(-deciles)]\nh_rank$rrate <- round (h_rank$cnt_resp / h_rank$cnt,2);\nh_rank$cum_resp <- cumsum(h_rank$cnt_resp)\nh_rank$cum_non_resp <- cumsum(h_rank$cnt_non_resp)\nh_rank$cum_rel_resp <- round(h_rank$cum_resp / sum(h_rank$cnt_resp),2);\nh_rank$cum_rel_non_resp <- round(h_rank$cum_non_resp / sum(h_rank$cnt_non_resp),2);\nh_rank$ks <- abs(h_rank$cum_rel_resp - h_rank$cum_rel_non_resp);\n\n\nlibrary(scales)\nh_rank$rrate <- percent(h_rank$rrate)\nh_rank$cum_rel_resp <- percent(h_rank$cum_rel_resp)\nh_rank$cum_rel_non_resp <- percent(h_rank$cum_rel_non_resp)\n\nView(h_rank)\n\n",
    "created" : 1495707972182.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2238537035",
    "id" : "9FD29785",
    "lastKnownWriteTime" : 1495717046,
    "last_content_update" : 1495717046491,
    "path" : "C:/Home/Work/GreatLakes/Data Mining/Neural Nets/In-Class-DMMLAI/R_Neural_Network.R",
    "project_path" : "R_Neural_Network.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
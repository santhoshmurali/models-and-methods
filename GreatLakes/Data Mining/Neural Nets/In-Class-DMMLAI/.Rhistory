getwd()
getwd()
nn.dev <- read.table("data/DEV_SAMPLE.csv", sep = ",", header = T)
nn.holdout <- read.table("data/HOLDOUT_SAMPLE.csv", sep = ",", header = T)
View(nn.dev)
occ.matrix <- model.matrix(~ Occupation - 1, data = nn.dev)
occ.matrix <- model.matrix(~ Occupation - 1, data = nn.dev)
View(nn.holdout)
c(nrow(nn.dev), nrow(nn.holdout))
str(nn.dev)
sum(nn.dev$Target) / nrow(nn.dev)
sum(nn.holdout$Target) / nrow(nn.holdout)
install.packages("neuralnet")
library(neuralnet)
nn1 <- neuralnet(formula = Target ~  Age +  Balance  + SCR +  No_OF_CR_TXNS + Holding_Period ,
data = nn.dev,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = "full",
lifesign.step = 10,
threshold = 0.1,
stepmax = 2000
##startweights = startweightsObj
)
plot (nn1)
nn.dev$Prob = nn1$net.result[[1]]
quantile(nn.dev$Prob, c(0,1,5,10,25,50,75,90,95,99,100)/100)
hist(nn.dev$Prob)
nn1$net.result
table(nn1$net.result)
nn.dev <- read.table("DEV_SAMPLE.csv", sep = ",", header = T)
nn.dev <- read.table("data/DEV_SAMPLE.csv", sep = ",", header = T)
x <- subset(nn.dev,
select = c("Age","Balance", "SCR", "No_OF_CR_TXNS", "Holding_Period"
##,"OccupationPROF", "OccupationSAL", "OccupationSELF.EMP", "OccupationSENP","GenderF", "GenderM", "GenderO"
)
)
View(nn.dev)
nn.devscaled <- scale(x)
nn.devscaled <- cbind(nn.dev[2], nn.devscaled)
View(nn.devscaled)
nn2 <- neuralnet(formula = Target ~  Age + Balance  + SCR +  No_OF_CR_TXNS + Holding_Period ,
## + OccupationPROF + OccupationSAL + OccupationSELF.EMP + OccupationSENP + GenderF + GenderM + GenderO,
data = nn.devscaled,
hidden = 3,
err.fct = "sse",
linear.output = FALSE,
lifesign = "full",
lifesign.step = 1,
threshold = 0.1,
stepmax = 2000
)
plot(nn2)
??"err.fct"
plot (nn1)
nn2$net.result
nn.dev$Prob = nn2$net.result[[1]]
quantile(nn.dev$Prob, c(0,1,5,10,25,50,75,90,95,99,100)/100)
hist(nn.dev$Prob)
View(nn.dev)
## deciling code
decile <- function(x){
deciles <- vector(length=10)
for (i in seq(0.1,1,.1)){
deciles[i*10] <- quantile(x, i, na.rm=T)
}
return (
ifelse(x<deciles[1], 1,
ifelse(x<deciles[2], 2,
ifelse(x<deciles[3], 3,
ifelse(x<deciles[4], 4,
ifelse(x<deciles[5], 5,
ifelse(x<deciles[6], 6,
ifelse(x<deciles[7], 7,
ifelse(x<deciles[8], 8,
ifelse(x<deciles[9], 9, 10
))))))))))
}
## deciling
nn.dev$deciles <- decile(nn.dev$Prob)
library(data.table)
install.packages("data.table")
library(data.table)
library(scales)
tmp_DT = data.table(nn.dev)
rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round (rank$cnt_resp / rank$cnt,2);
rank$cum_resp <- cumsum(rank$cnt_resp)
rank$cum_non_resp <- cumsum(rank$cnt_non_resp)
rank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);
rank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);
rank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);
rank$rrate <- percent(rank$rrate)
rank$cum_rel_resp <- percent(rank$cum_rel_resp)
rank$cum_rel_non_resp <- percent(rank$cum_rel_non_resp)
View(rank)
nn.dev$deciles <- decile(nn.dev$Prob)
## Ranking code
##install.packages("data.table")
library(data.table)
tmp_DT = data.table(nn.dev)
rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round (rank$cnt_resp / rank$cnt,2);
rank$cum_resp <- cumsum(rank$cnt_resp)
rank$cum_non_resp <- cumsum(rank$cnt_non_resp)
rank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);
rank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);
rank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);
rank$rrate <- percent(rank$rrate)
rank$cum_rel_resp <- percent(rank$cum_rel_resp)
rank$cum_rel_non_resp <- percent(rank$cum_rel_non_resp)
View(rank)
nn.dev$Class = ifelse(nn.dev$Prob>0.21,1,0)
with( nn.dev, table(Target, as.factor(Class)  ))
library(caret)
confusionMatrix(nn.dev$Target, nn.dev$Class)
sum((nn.dev$Target - nn.dev$Prob)^2)/2
library(ROCR)
install.packages("ROCR")
pred <- prediction(nn.dev$Prob, nn.dev$Target)
nn.dev$Prob
pred <- prediction(nn.dev$Prob[[1]], nn.dev$Target)
nn.dev$Target[[1]]
nn.dev$Target
nn.dev$Target[1]
pred <- prediction(nn.dev$Prob[[1]], nn.dev$Target[1])
nn.dev$Prob[1]
pred <- prediction(nn.dev$Prob[1], nn.dev$Target[1])
library(ineq)
install.packages("ineq")
pred <- prediction(nn.dev$Prob, nn.dev$Target])
pred <- prediction(nn.dev$Prob, nn.dev$Target)
nn.dev$Prob[1]
nn.dev$Prob
pred <- prediction(nn.dev$Prob, nn.dev$Target)
library(ineq)
gini = ineq(nn.dev$Prob, type="Gini")
gini
pred <- prediction(nn.dev$Prob, nn.dev$Target)
confusionMatrix(nn.dev$Target, nn.dev$Class)
library(ROCR)
nn.dev$Prob
pred <- prediction(nn.dev$Prob, nn.dev$Target)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
KS <- max(attr(perf, 'y.values')[[1]]-attr(perf, 'x.values')[[1]])
auc <- performance(pred,"auc");
auc <- as.numeric(auc@y.values)
library(ineq)
gini = ineq(nn.dev$Prob, type="Gini")
perf <- performance(pred, "tpr", "fpr")
x <- subset(nn.holdout,
select = c("Age","Balance", "SCR", "No_OF_CR_TXNS", "Holding_Period")
)
x.scaled <- scale(x)
View(x.scaled)
compute.output = compute(nn2, x.scaled)
View(nn.holdout)
nn.holdout$Predict.score = compute.output$net.result
View(nn.holdout)
quantile(nn.holdout$Predict.score, c(0,1,5,10,25,50,75,90,95,99,100)/100)
nn.holdout$deciles <- decile(nn.holdout$Predict.score)
library(data.table)
tmp_DT = data.table(nn.holdout)
h_rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
h_rank$rrate <- round (h_rank$cnt_resp / h_rank$cnt,2);
h_rank$cum_resp <- cumsum(h_rank$cnt_resp)
h_rank$cum_non_resp <- cumsum(h_rank$cnt_non_resp)
h_rank$cum_rel_resp <- round(h_rank$cum_resp / sum(h_rank$cnt_resp),2);
h_rank$cum_rel_non_resp <- round(h_rank$cum_non_resp / sum(h_rank$cnt_non_resp),2);
h_rank$ks <- abs(h_rank$cum_rel_resp - h_rank$cum_rel_non_resp);
h_rank$rrate <- percent(h_rank$rrate)
h_rank$cum_rel_resp <- percent(h_rank$cum_rel_resp)
h_rank$cum_rel_non_resp <- percent(h_rank$cum_rel_non_resp)
View(h_rank)
getwd()
RFDF.dev <- read.table("data/DEV_SAMPLE.csv", sep = ",", header = T)
RFDF.holdout <- read.table("data/HOLDOUT_SAMPLE.csv", sep = ",", header = T)
c(nrow(RFDF.dev), nrow(RFDF.holdout))
library(randomForest)
(nrow(RFDF.dev)/nrow(RFDF.holdout))
View(RFDF.dev)
RF <- randomForest(as.factor(Target) ~ ., data = RFDF.dev[,-1],
ntree=501, mtry = 3, nodesize = 10,
importance=TRUE)
print(RF)
RF$votes
plot(RF, main="")
legend("topright", c("OOB", "0", "1"), text.col=1:6, lty=1:3, col=1:3)
title(main="Error Rates Random Forest RFDF.dev")
RF <- randomForest(as.factor(Target) ~ ., data = RFDF.dev[,-1],
ntree=20, mtry = 3, nodesize = 10,
importance=TRUE)
plot(RF, main="")
RF <- randomForest(as.factor(Target) ~ ., data = RFDF.dev[,-1],
ntree=10, mtry = 3, nodesize = 10,
importance=TRUE)
plot(RF, main="")
RF <- randomForest(as.factor(Target) ~ ., data = RFDF.dev[,-1],
ntree=100, mtry = 3, nodesize = 10,
importance=TRUE)
print(RF)
plot(RF, main="")
legend("topright", c("OOB", "0", "1"), text.col=1:6, lty=1:3, col=1:3)
title(main="Error Rates Random Forest RFDF.dev")
RF$err.rate
impVar <- round(randomForest::importance(RF), 2)
impVar[order(impVar[,3], decreasing=TRUE),]
tRF <- tuneRF(x = RFDF.dev[,-c(1,2)],
y=as.factor(RFDF.dev$Target),
mtryStart = 3,
ntreeTry=100,
stepFactor = 2,
improve = 0.001,
trace=TRUE,
plot = TRUE,
doBest = TRUE,
nodesize = 150,
importance=TRUE
)
tRF$importance
impVar <- round(randomForest::importance(RF), 2)
impVar[order(impVar[,3], decreasing=TRUE),]
tRF <- tuneRF(x = RFDF.dev[,-c(1,2)],
y=as.factor(RFDF.dev$Target),
mtryStart = 3,
ntreeTry=100,
stepFactor = 2,
improve = 0.001,
trace=TRUE,
plot = TRUE,
doBest = TRUE,
nodesize = 200,
importance=TRUE
)
tRF <- tuneRF(x = RFDF.dev[,-c(1,2)],
y=as.factor(RFDF.dev$Target),
mtryStart = 3,
ntreeTry=100,
stepFactor = 2,
improve = 0.0001,
trace=TRUE,
plot = TRUE,
doBest = TRUE,
nodesize = 200,
importance=TRUE
)
tRF$importance
View(RFDF.dev)
RFDF.dev$predict.class <- predict(tRF, RFDF.dev, type="class")
RFDF.dev$predict.score <- predict(tRF, RFDF.dev, type="prob")
head(RFDF.dev)
decile <- function(x){
deciles <- vector(length=10)
for (i in seq(0.1,1,.1)){
deciles[i*10] <- quantile(x, i, na.rm=T)
}
return (
ifelse(x<deciles[1], 1,
ifelse(x<deciles[2], 2,
ifelse(x<deciles[3], 3,
ifelse(x<deciles[4], 4,
ifelse(x<deciles[5], 5,
ifelse(x<deciles[6], 6,
ifelse(x<deciles[7], 7,
ifelse(x<deciles[8], 8,
ifelse(x<deciles[9], 9, 10
))))))))))
}
RFDF.dev$deciles <- decile(RFDF.dev$predict.score[,2])
library(data.table)
tmp_DT = data.table(RFDF.dev)
rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round (rank$cnt_resp / rank$cnt,2);
rank$cum_resp <- cumsum(rank$cnt_resp)
rank$cum_non_resp <- cumsum(rank$cnt_non_resp)
rank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);
rank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);
rank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);
?tuneRF
## Tuning Random Forest
tRF <- tuneRF(x = RFDF.dev[,-c(1,2)],
y=as.factor(RFDF.dev$Target),
mtryStart = 3,
ntreeTry=100,
stepFactor = 2,
improve = 0.0001,
trace=TRUE,
plot = TRUE,
doBest = TRUE,
nodesize = 10,
importance=TRUE
)
tRF$importance
View(RFDF.dev)
## Scoring syntax
RFDF.dev$predict.class <- predict(tRF, RFDF.dev, type="class")
RFDF.dev$predict.score <- predict(tRF, RFDF.dev, type="prob")
head(RFDF.dev)
class(RFDF.dev$predict.score)
## deciling
## deciling code
decile <- function(x){
deciles <- vector(length=10)
for (i in seq(0.1,1,.1)){
deciles[i*10] <- quantile(x, i, na.rm=T)
}
return (
ifelse(x<deciles[1], 1,
ifelse(x<deciles[2], 2,
ifelse(x<deciles[3], 3,
ifelse(x<deciles[4], 4,
ifelse(x<deciles[5], 5,
ifelse(x<deciles[6], 6,
ifelse(x<deciles[7], 7,
ifelse(x<deciles[8], 8,
ifelse(x<deciles[9], 9, 10
))))))))))
}
RFDF.dev$deciles <- decile(RFDF.dev$predict.score[,2])
#library(data.table)
tmp_DT = data.table(RFDF.dev)
rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round (rank$cnt_resp / rank$cnt,2);
rank$cum_resp <- cumsum(rank$cnt_resp)
rank$cum_non_resp <- cumsum(rank$cnt_non_resp)
rank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);
rank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);
rank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);
View(rank)
decile
RFDF.dev$predict.score[,2]
tRF <- tuneRF(x = RFDF.dev[,-c(1,2)],
y=as.factor(RFDF.dev$Target),
mtryStart = 3,
ntreeTry=100,
stepFactor = 2,
improve = 0.001,
trace=TRUE,
plot = TRUE,
doBest = TRUE,
nodesize = 10,
importance=TRUE
)
tRF$importance
RFDF.dev$predict.class <- predict(tRF, RFDF.dev, type="class")
RFDF.dev$predict.score <- predict(tRF, RFDF.dev, type="prob")
head(RFDF.dev)
class(RFDF.dev$predict.score)
decile <- function(x){
deciles <- vector(length=10)
for (i in seq(0.1,1,.1)){
deciles[i*10] <- quantile(x, i, na.rm=T)
}
return (
ifelse(x<deciles[1], 1,
ifelse(x<deciles[2], 2,
ifelse(x<deciles[3], 3,
ifelse(x<deciles[4], 4,
ifelse(x<deciles[5], 5,
ifelse(x<deciles[6], 6,
ifelse(x<deciles[7], 7,
ifelse(x<deciles[8], 8,
ifelse(x<deciles[9], 9, 10
))))))))))
}
RFDF.dev$deciles <- decile(RFDF.dev$predict.score[,2])
tmp_DT = data.table(RFDF.dev)
rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round (rank$cnt_resp / rank$cnt,2);
rank$cum_resp <- cumsum(rank$cnt_resp)
rank$cum_non_resp <- cumsum(rank$cnt_non_resp)
rank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);
rank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);
rank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);
View(rank)
RFDF.dev <- read.table("data/DEV_SAMPLE.csv", sep = ",", header = T)
RFDF.holdout <- read.table("data/HOLDOUT_SAMPLE.csv", sep = ",", header = T)
tRF <- tuneRF(x = RFDF.dev[,-c(1,2)],
y=as.factor(RFDF.dev$Target),
mtryStart = 3,
ntreeTry=100,
stepFactor = 2,
improve = 0.001,
trace=TRUE,
plot = TRUE,
doBest = TRUE,
nodesize = 100,
importance=TRUE
)
RFDF.dev$predict.class <- predict(tRF, RFDF.dev, type="class")
RFDF.dev$predict.score <- predict(tRF, RFDF.dev, type="prob")
class(RFDF.dev$predict.score)
RFDF.dev$deciles <- decile(RFDF.dev$predict.score[,2])
tmp_DT = data.table(RFDF.dev)
rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round (rank$cnt_resp / rank$cnt,2);
rank$cum_resp <- cumsum(rank$cnt_resp)
rank$cum_non_resp <- cumsum(rank$cnt_non_resp)
rank$cum_rel_resp <- round(rank$cum_resp / sum(rank$cnt_resp),2);
rank$cum_rel_non_resp <- round(rank$cum_non_resp / sum(rank$cnt_non_resp),2);
rank$ks <- abs(rank$cum_rel_resp - rank$cum_rel_non_resp);
View(rank)

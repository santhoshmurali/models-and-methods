{
    "collab_server" : "",
    "contents" : "## Author: Rajesh Jakhotia\n## Company Name: K2 Analytics Finishing School Pvt. Ltd\n## Email : ar.jakhotia@k2analytics.co.in\n## Website : k2analytics.co.in\n\n#### Amended and Customized by Santhosh Murali\n##  for Greatlakes\n\n\n## Let us first set the working directory path\n\nsetwd (\"Data/\")\ngetwd()\n\n## Data Import\nCTDF.dev <- read.table(\"DEV_SAMPLE.csv\", sep = \",\", header = T)\nCTDF.dev.skewed <- read.table(\"DEV_SAMPLE_skewed.csv\", sep = \",\", header = T)\nCTDF.holdout <- read.table(\"HOLDOUT_SAMPLE.csv\", sep = \",\", header = T)\nc(nrow(CTDF.dev), nrow(CTDF.holdout))\nstr(CTDF.dev)\n\n\n\n## installing rpart package for CART\n#install.packages(\"rpart\")\n#install.packages(\"rpart.plot\")\n\n\n## loading the library\nlibrary(rpart)\nlibrary(rpart.plot)\n\n\n## Target Rate \nsum(CTDF.dev$Target)/14000\n\n## setting the control paramter inputs for rpart\nr.ctrl = rpart.control(minsplit=100, minbucket = 10, cp = 0, xval = 5)\nr.ctrl\n\n## calling the rpart function to build the tree\n##m1 <- rpart(formula = Target ~ ., data = CTDF.dev[which(CTDF.dev$Holding_Period>10),-1], method = \"class\", control = r.ctrl)\nm1 <- rpart(formula = Target ~ ., data = CTDF.dev[,-1], method = \"class\", control = r.ctrl)\nm1\n\nm2 <- rpart(formula = Target ~ ., data = CTDF.dev.skewed[,-1], method = \"class\", control = r.ctrl)\nm2\n#install.packages(\"rattle\")\n#install.packages(\"RColorBrewer\")\nlibrary(rattle)\nlibrary(RColorBrewer)\nfancyRpartPlot(m1)\nfancyRpartPlot(m2)\n\n## to find how the tree performs\nprintcp(m1) # will give cost complexity parameter table\nplotcp(m1)\n\n##rattle()\n## Pruning Code\nptree<- prune(m1, cp= 0.0021 ,\"CP\")\nprintcp(ptree)\nfancyRpartPlot(ptree, uniform=TRUE,  main=\"Pruned Classification Tree\")\n\n\n## Let's use rattle to see various model evaluation measures\n##rattle()\n\nView(CTDF.dev)\n## Scoring syntax\nCTDF.dev$predict.class <- predict(m1, CTDF.dev, type=\"class\")\nCTDF.dev$predict.score <- predict(m1, CTDF.dev)\n\nView(CTDF.dev)\nhead(CTDF.dev)\n\n\n## deciling code\ndecile <- function(x){\n  deciles <- vector(length=10)\n  for (i in seq(0.1,1,.1)){\n    deciles[i*10] <- quantile(x, i, na.rm=T)\n  }\n  return (\n    ifelse(x<deciles[1], 1,\n           ifelse(x<deciles[2], 2,\n                  ifelse(x<deciles[3], 3,\n                         ifelse(x<deciles[4], 4,\n                                ifelse(x<deciles[5], 5,\n                                       ifelse(x<deciles[6], 6,\n                                              ifelse(x<deciles[7], 7,\n                                                     ifelse(x<deciles[8], 8,\n                                                            ifelse(x<deciles[9], 9, 10\n                                                            ))))))))))\n}\n\nclass(CTDF.dev$predict.score)\n## deciling\nCTDF.dev$deciles <- decile(CTDF.dev$predict.score[,2])\nView(CTDF.dev)\n\n## Ranking code\n##install.packages(\"data.table\")\nlibrary(data.table)\ntmp_DT = data.table(CTDF.dev)\nrank <- tmp_DT[, list(\n  cnt = length(Target), \n  cnt_resp = sum(Target), \n  cnt_non_resp = sum(Target == 0)) , \n  by=deciles][order(-deciles)]\nrank$rrate <- round(rank$cnt_resp * 100 / rank$cnt,2);\nrank$cum_resp <- cumsum(rank$cnt_resp)\nrank$cum_non_resp <- cumsum(rank$cnt_non_resp)\nrank$cum_perct_resp <- round(rank$cum_resp * 100 / sum(rank$cnt_resp),2);\nrank$cum_perct_non_resp <- round(rank$cum_non_resp * 100 / sum(rank$cnt_non_resp),2);\nrank$ks <- abs(rank$cum_perct_resp - rank$cum_perct_non_resp);\n\nView(rank)\n\n\n\n##install.packages(\"ROCR\")\nlibrary(ROCR)\npred <- prediction(CTDF.dev$predict.score[,2], CTDF.dev$Target)\nperf <- performance(pred, \"tpr\", \"fpr\")\nplot(perf)\nKS <- max(attr(perf, 'y.values')[[1]]-attr(perf, 'x.values')[[1]])\nauc <- performance(pred,\"auc\"); \nauc <- as.numeric(auc@y.values)\n\n##install.packages(\"ineq\")\nlibrary(ineq)\ngini = ineq(CTDF.dev$predict.score[,2], type=\"Gini\")\n\nwith(CTDF.dev, table(Target, predict.class))\nauc\nKS\ngini\n\nView(rank)\n## Syntax to get the node path\ntree.path <- path.rpart(ptree, node = c(26, 27))\n\nnrow(CTDF.holdout)\n\n## Scoring Holdout sample\nCTDF.holdout$predict.class <- predict(m1, CTDF.holdout, type=\"class\")\nCTDF.holdout$predict.score <- predict(m1, CTDF.holdout)\n\n\nCTDF.holdout$deciles <- decile(CTDF.holdout$predict.score[,2])\nView(CTDF.holdout)\n\n## Ranking code\n##install.packages(\"data.table\")\nlibrary(data.table)\ntmp_DT = data.table(CTDF.holdout)\nh_rank <- tmp_DT[, list(\n  cnt = length(Target), \n  cnt_resp = sum(Target), \n  cnt_non_resp = sum(Target == 0)) , \n  by=deciles][order(-deciles)]\nh_rank$rrate <- round(h_rank$cnt_resp * 100 / h_rank$cnt,2);\nh_rank$cum_resp <- cumsum(h_rank$cnt_resp)\nh_rank$cum_non_resp <- cumsum(h_rank$cnt_non_resp)\nh_rank$cum_perct_resp <- round(h_rank$cum_resp * 100 / sum(h_rank$cnt_resp),2);\nh_rank$cum_perct_non_resp <- round(h_rank$cum_non_resp * 100 / sum(h_rank$cnt_non_resp),2);\nh_rank$ks <- abs(h_rank$cum_perct_resp - h_rank$cum_perct_non_resp);\n\nView(h_rank)\n\n\nwith(CTDF.holdout, table(Target, predict.class))\n\n",
    "created" : 1499433921550.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1558603598",
    "id" : "CC0C8506",
    "lastKnownWriteTime" : 1491538367,
    "last_content_update" : 1491538367,
    "path" : "C:/Home/Work/GreatLakes/Data Mining/MyWork/Clustering_and_Classification/Cart.r",
    "project_path" : "Cart.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
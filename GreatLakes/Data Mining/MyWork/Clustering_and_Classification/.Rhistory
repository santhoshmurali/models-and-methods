setwd ("Data/")
getwd()
RCDF <- read.csv("Cust_Spend_Data.csv", header=TRUE)
View(RCDF)
RCDF[,3:7]
d.euc <- dist(x=RCDF[,3:7], method = "euclidean")
d.euc
clus1 <- hclust(d.euc, method = "average")
plot(clus1, labels = as.character(RCDF[,2]))
scaled.RCDF <- scale(RCDF[,3:7])
head(scaled.RCDF, 10)
d.euc
d.euc <- dist(x=scaled.RCDF, method = "euclidean")
d.euc
clus2 <- hclust(d.euc, method = "average")
plot(clus2, labels = as.character(RCDF[,2]))
rect.hclust(clus2, k=3, border=rainbow(3))
clus2$height
View(RCDF)
RCDF$Clusters <- cutree(clus2, k=3)
?aggregate
aggregate(RCDF[,-c(1,2, 8)],list(RCDF$Clusters),mean)
aggregate(list(RCDF$Clusters),mean)
list(RCDF$Clusters)
data.frame( Cluster=aggr[,1],
Freq=as.vector(table(RCDF$Clusters)),
aggr[,-1])
aggr = aggregate(RCDF[,-c(1,2, 8)],list(RCDF$Clusters),mean)
data.frame( Cluster=aggr[,1],
Freq=as.vector(table(RCDF$Clusters)),
aggr[,-1])
clus.profile <- data.frame( Cluster=aggr[,1],
Freq=as.vector(table(RCDF$Clusters)),
aggr[,-1])
View(clus.profile)
KRCDF <- read.csv("Cust_Spend_Data.csv", header=TRUE)
KRCDF <- read.csv("Cust_Spend_Data.csv", header=TRUE)
scaled.RCDF <- scale(KRCDF[,3:7])
View(KRCDF)
View(RCDF)
View(scaled.RCDF)
class(scaled.RCDF)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(scaled.RCDF, nc=5)
install.packages("NbClust")
library(NbClust)
?NbClust
set.seed(1234)
nc <- NbClust(KRCDF[,c(-1,-2)], min.nc=2, max.nc=4, method="kmeans")
table(nc$Best.n[1,])
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen by 26 Criteria")
kmeans.clus = kmeans(x=scaled.RCDF, centers = 3, nstart = 25)
kmeans.clus
tmp <- as.data.frame(scaled.RCDF)
tmp$Clusters <- kmeans.clus$cluster
View(tmp)
install.packages("fpc")
library(fpc)
plotcluster(scaled.RCDF, kmeans.clus$cluster)
library(cluster)
clusplot(scaled.RCDF, kmeans.clus$cluster,
color=TRUE, shade=TRUE, labels=2, lines=1)
KRCDF$Clusters <- kmeans.clus$cluster
View(KRCDF)
aggr = aggregate(KRCDF[,-c(1,2, 8)],list(KRCDF$Clusters),mean)
clus.profile <- data.frame( Cluster=aggr[,1],
Freq=as.vector(table(KRCDF$Clusters)),
aggr[,-1])
View(clus.profile)
setwd ("Data/)
getwd()
## Data Import
CTDF.dev <- read.table("DEV_SAMPLE.csv", sep = ",", header = T)
CTDF.holdout <- read.table("HOLDOUT_SAMPLE.csv", sep = ",", header = T)
c(nrow(CTDF.dev), nrow(CTDF.holdout))
str(CTDF.dev)
## installing rpart package for CART
#install.packages("rpart")
#install.packages("rpart.plot")
## loading the library
library(rpart)
library(rpart.plot)
## Target Rate
sum(CTDF.dev$Target)/14000
## setting the control paramter inputs for rpart
r.ctrl = rpart.control(minsplit=100, minbucket = 10, cp = 0, xval = 5)
## calling the rpart function to build the tree
##m1 <- rpart(formula = Target ~ ., data = CTDF.dev[which(CTDF.dev$Holding_Period>10),-1], method = "class", control = r.ctrl)
m1 <- rpart(formula = Target ~ ., data = CTDF.dev[,-1], method = "class", control = r.ctrl)
m1
#install.packages("rattle")
#install.packages("RColorBrewer")
library(rattle)
library(RColorBrewer)
fancyRpartPlot(m1)
## to find how the tree performs
printcp(m1) # will give cost complexity parameter table
plotcp(m1)
##rattle()
## Pruning Code
ptree<- prune(m1, cp= 0.0021 ,"CP")
printcp(ptree)
fancyRpartPlot(ptree, uniform=TRUE,  main="Pruned Classification Tree")
## Let's use rattle to see various model evaluation measures
##rattle()
View(CTDF.dev)
## Scoring syntax
CTDF.dev$predict.class <- predict(m1, CTDF.dev, type="class")
CTDF.dev$predict.score <- predict(m1, CTDF.dev)
View(CTDF.dev)
head(CTDF.dev)
## deciling code
decile <- function(x){
deciles <- vector(length=10)
for (i in seq(0.1,1,.1)){
deciles[i*10] <- quantile(x, i, na.rm=T)
}
return (
ifelse(x<deciles[1], 1,
ifelse(x<deciles[2], 2,
ifelse(x<deciles[3], 3,
ifelse(x<deciles[4], 4,
ifelse(x<deciles[5], 5,
ifelse(x<deciles[6], 6,
ifelse(x<deciles[7], 7,
ifelse(x<deciles[8], 8,
ifelse(x<deciles[9], 9, 10
))))))))))
}
class(CTDF.dev$predict.score)
## deciling
CTDF.dev$deciles <- decile(CTDF.dev$predict.score[,2])
View(CTDF.dev)
## Ranking code
##install.packages("data.table")
library(data.table)
tmp_DT = data.table(CTDF.dev)
rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round(rank$cnt_resp * 100 / rank$cnt,2);
rank$cum_resp <- cumsum(rank$cnt_resp)
rank$cum_non_resp <- cumsum(rank$cnt_non_resp)
rank$cum_perct_resp <- round(rank$cum_resp * 100 / sum(rank$cnt_resp),2);
rank$cum_perct_non_resp <- round(rank$cum_non_resp * 100 / sum(rank$cnt_non_resp),2);
rank$ks <- abs(rank$cum_perct_resp - rank$cum_perct_non_resp);
View(rank)
##install.packages("ROCR")
library(ROCR)
pred <- prediction(CTDF.dev$predict.score[,2], CTDF.dev$Target)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
KS <- max(attr(perf, 'y.values')[[1]]-attr(perf, 'x.values')[[1]])
auc <- performance(pred,"auc");
auc <- as.numeric(auc@y.values)
##install.packages("ineq")
library(ineq)
gini = ineq(CTDF.dev$predict.score[,2], type="Gini")
with(CTDF.dev, table(Target, predict.class))
auc
KS
gini
View(rank)
## Syntax to get the node path
tree.path <- path.rpart(ptree, node = c(26, 27))
nrow(CTDF.holdout)
## Scoring Holdout sample
CTDF.holdout$predict.class <- predict(m1, CTDF.holdout, type="class")
CTDF.holdout$predict.score <- predict(m1, CTDF.holdout)
CTDF.holdout$deciles <- decile(CTDF.holdout$predict.score[,2])
View(CTDF.holdout)
## Ranking code
##install.packages("data.table")
library(data.table)
tmp_DT = data.table(CTDF.holdout)
h_rank <- tmp_DT[, list(
cnt = length(Target),
cnt_resp = sum(Target),
cnt_non_resp = sum(Target == 0)) ,
by=deciles][order(-deciles)]
h_rank$rrate <- round(h_rank$cnt_resp * 100 / h_rank$cnt,2);
h_rank$cum_resp <- cumsum(h_rank$cnt_resp)
h_rank$cum_non_resp <- cumsum(h_rank$cnt_non_resp)
h_rank$cum_perct_resp <- round(h_rank$cum_resp * 100 / sum(h_rank$cnt_resp),2);
h_rank$cum_perct_non_resp <- round(h_rank$cum_non_resp * 100 / sum(h_rank$cnt_non_resp),2);
h_rank$ks <- abs(h_rank$cum_perct_resp - h_rank$cum_perct_non_resp);
View(h_rank)
with(CTDF.holdout, table(Target, predict.class))
setwd ("Data/")
getwd()
CTDF.dev <- read.table("DEV_SAMPLE.csv", sep = ",", header = T)
CTDF.holdout <- read.table("HOLDOUT_SAMPLE.csv", sep = ",", header = T)
View(CTDF.dev)
View(CTDF.holdout)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
c(nrow(CTDF.dev), nrow(CTDF.holdout))
str(CTDF.dev)
sum(CTDF.dev$Target)/14000
r.ctrl = rpart.control(minsplit=100, minbucket = 10, cp = 0, xval = 5)
r.ctrl
m1 <- rpart(formula = Target ~ ., data = CTDF.dev[,-1], method = "class", control = r.ctrl)
m1
install.packages("rattle")
install.packages("RColorBrewer")
library(rattle)
library(RColorBrewer)
fancyRpartPlot(m1)
fancyRpartPlot(m1)
printcp(m1) # will give cost complexity parameter table
plotcp(m1)
CTDF.dev.skewed <- read.table("DEV_SAMPLE_skewed.csv", sep = ",", header = T)
m1 <- rpart(formula = Target ~ ., data = CTDF.dev.skewed[,-1], method = "class", control = r.ctrl)
m1 <- rpart(formula = Target ~ ., data = CTDF.dev[,-1], method = "class", control = r.ctrl)
m2 <- rpart(formula = Target ~ ., data = CTDF.dev.skewed[,-1], method = "class", control = r.ctrl)
m2
fancyRpartPlot(m1,m2)
fancyRpartPlot(m1)
fancyRpartPlot(m1)
fancyRpartPlot(m2)
as.Date("01-Apr-2017")
as.Date("01-04-2017")
as.Date("2017-04-01")
as.Date("2017-04-01") + 11
as.Date("2017-04-01") + 11m
as.Date("2017-04-01") + 11 months()
as.Date("2017-04-01") + 11 months()
as.Date("2017-04-01") + months(11)
library(lubridate)
date()
lubridate::date('2017-04-01')
lubridate::date('2017-04-01') + 11m
lubridate::date('2017-04-01') + month(11)
lubridate::date('2017-04-01') + months(11)
setwd ("Data/")
getwd()
CTDF.dev <- read.table("DEV_SAMPLE.csv", sep = ",", header = T)
CTDF.dev.skewed <- read.table("DEV_SAMPLE_skewed.csv", sep = ",", header = T)
CTDF.holdout <- read.table("HOLDOUT_SAMPLE.csv", sep = ",", header = T)
c(nrow(CTDF.dev), nrow(CTDF.holdout))
str(CTDF.dev)
library(rpart)
library(rpart.plot)
sum(CTDF.dev$Target)/14000

library(datasets)
install.packages(c("cluster", "codetools", "foreign", "lattice", "Matrix", "mgcv"))
mtcars
median(mtcars)
median(mtcars#hp)
f
median(mtcars$hp)
install.packages("shiny")
2^100
quit()
getwd()
setwd("C:/Home/Work/GreatLakes/R/HomeWorkOuts")
getwd()
data()
PlantGrowth
df_PlantGrowth <- data.frame(PlantGrowth)
hist(df_PlantGrowth$weight)
??"freequency distribution
??"freequency distribution
??"freequency distribution"
??"class"
??"classes"
with(df_PlantGrowth, table(weight))
cut(df_PlantGrowth$weight, 5)
sqrt(length(df_PlantGrowth$weight))
round(sqrt(length(df_PlantGrowth$weight)))
ceiling(sqrt(length(df_PlantGrowth$weight)))
plantGrowth_Bins = ceiling(sqrt(length(df_PlantGrowth$weight)))
attach(PlantGrowth)
cut(weight, 5)
plantGrowth_Bins = ceiling(sqrt(length(weight)))
plantGrowthRange = max(weight) - min(weight)
plantGrowthRange = ceiling(max(weight) - min(weight))
>seq
?seq
plantGrowthBinWidth = plantGrowthRange/plantGrowth_Bins
PlantGrowthClasses = seq(from = min(weight), to=max(weight) , by = plantGrowthBinWidth )
min(weight)
planGrowthFreeq = cut(weight, planGrowthClasses)
planGrowthFreeq = cut(weight, PlantGrowthClasses)
plantGrowthFreeq = cut(weight, PlantGrowthClasses)
drop(planGrowthFreeq)
table(planGrowthFreeq)
PlantGrowthClasses
??"transpose?
"
??"transporse"
name(table(planGrowthFreeq))
?name
table(planGrowthFreeq).names
names(table(planGrowthFreeq))
PlantGrowthFreeqTable <- table(planGrowthFreeq)
class(PlantGrowthFreeqTable)
t(PlantGrowthFreeqTable)
t(t(PlantGrowthFreeqTable))
PlantGrowthFreeqTable
PlantGrowthClasses[:1]
PlantGrowthClasses[,1]
PlantGrowthClasses[,-1]
PlantGrowthClasses[1]
PlantGrowthClasses[-1]
PlantGrowthClasses
PlantGrowthClasses[1]
PlantGrowthClasses[1,]
PlantGrowthClasses[0]
PlantGrowthClasses[length(PlantGrowthClasses)]
PlantGrowthClasses[length(PlantGrowthClasses)-1]
PlantGrowthClasses[-1*length(PlantGrowthClasses)-1]
-1*length(PlantGrowthClasses)-1
-1*length(PlantGrowthClasses)-2
-1*(length(PlantGrowthClasses)-1)
PlantGrowthClasses[-1*(length(PlantGrowthClasses)-1)]
-1*(length(PlantGrowthClasses)-1)
PlantGrowthClasses[-1*(length(PlantGrowthClasses)-1)]
PlantGrowthClasses
PlantGrowthClasses[(length(PlantGrowthClasses)-1)]
PlantGrowthClasses[(length(PlantGrowthClasses)-1),]
PlantGrowthClasses[-1]
PlantGrowthClasses[-3]
-1*(length(PlantGrowthClasses))
PlantGrowthClasses[-1*(length(PlantGrowthClasses))]
names(PlantGrowthFreeqTable) <- PlantGrowthClasses[-1*(length(PlantGrowthClasses))]
t(t(PlantGrowthFreeqTable))
PlantGrowthFreeqTable <- t(t(PlantGrowthFreeqTable))
PlantGrowthFreeqTable
names(PlantGrowthFreeqTable) <- c("Class","Freeq")
PlantGrowthFreeqTable
names(PlantGrowthFreeqTable)
PlantGrowthFreeqTable <- t(t(PlantGrowthFreeqTable))
PlantGrowthFreeqTable
names(PlantGrowthFreeqTable)
class(PlantGrowthFreeqTable)
PlantGrowthFreeqTable <- data.frame(t(t(PlantGrowthFreeqTable)))
names(PlantGrowthFreeqTable)
names(PlantGrowthFreeqTable) <- NULL
PlantGrowthFreeqTable
str(PlantGrowthFreeqTable)
str(PlantGrowthFreeqTable$2)
str(PlantGrowthFreeqTable$1)
str(PlantGrowthFreeqTable$[1])
getwd()
df_PlantGrowth <- data.frame(PlantGrowth)
hist(df_PlantGrowth$weight)
??"freequency distribution"
setwd("C:/Home/Work/GreatLakes/R/HomeWorkOuts")
getwd()
df_PlantGrowth <- data.frame(PlantGrowth)
hist(df_PlantGrowth$weight)
with(df_PlantGrowth, table(weight))
setwd("C:/Home/Work/GreatLakes/R/HomeWorkOuts")
getwd()
df_PlantGrowth <- data.frame(PlantGrowth)
hist(df_PlantGrowth$weight)
attach(PlantGrowth)
cut(weight, 5)
plantGrowth_Bins = ceiling(sqrt(length(weight)))
plantGrowthRange = ceiling(max(weight) - min(weight))
plantGrowthBinWidth = plantGrowthRange/plantGrowth_Bins
PlantGrowthClasses = seq(from = min(weight), to=max(weight) , by = plantGrowthBinWidth )
plantGrowthFreeq = cut(weight, PlantGrowthClasses)
PlantGrowthFreeqTable <- table(planGrowthFreeq)
names(PlantGrowthFreeqTable) <- PlantGrowthClasses[-1*(length(PlantGrowthClasses))]
PlantGrowthFreeqTable <- data.frame(t(t(PlantGrowthFreeqTable)))
names(PlantGrowthFreeqTable) <- NULL
PlantGrowthFreeqTable
PlantGrowthFreeqTable
PlantGrowthFreeqTable <- data.frame(t(t(PlantGrowthFreeqTable)))
PlantGrowthFreeqTable
df_PlantGrowth <- data.frame(PlantGrowth)
hist(df_PlantGrowth$weight)
attach(PlantGrowth)
cut(weight, 5)
plantGrowth_Bins = ceiling(sqrt(length(weight)))
plantGrowthRange = ceiling(max(weight) - min(weight))
plantGrowthBinWidth = plantGrowthRange/plantGrowth_Bins
PlantGrowthClasses = seq(from = min(weight), to=max(weight) , by = plantGrowthBinWidth )
plantGrowthFreeq = cut(weight, PlantGrowthClasses)
PlantGrowthFreeqTable <- table(planGrowthFreeq)
PlantGrowthFreeqTable
names(PlantGrowthFreeqTable) <- PlantGrowthClasses[-1*(length(PlantGrowthClasses))]
PlantGrowthFreeqTable
t(PlantGrowthFreeqTable)
data.frame(PlantGrowthFreeqTable)
setwd("C:/Home/Work/GreatLakes/R/HomeWorkOuts")
getwd()
df_PlantGrowth <- data.frame(PlantGrowth)
hist(df_PlantGrowth$weight)
attach(PlantGrowth)
cut(weight, 5)
plantGrowth_Bins = ceiling(sqrt(length(weight)))
plantGrowthRange = ceiling(max(weight) - min(weight))
plantGrowthBinWidth = plantGrowthRange/plantGrowth_Bins
PlantGrowthClasses = seq(from = min(weight), to=max(weight) , by = plantGrowthBinWidth )
plantGrowthFreeq = cut(weight, PlantGrowthClasses)
PlantGrowthFreeqTable <- table(planGrowthFreeq)
names(PlantGrowthFreeqTable) <- PlantGrowthClasses[-1*(length(PlantGrowthClasses))]
PlantGrowthFreeqTable <- data.frame(PlantGrowthFreeqTable)
PlantGrowthFreeqTable
names(PlantGrowthFreeqTable)
names(PlantGrowthFreeqTable) <- c("Bins","Freeq")
PlantGrowthFreeqTable
PlantGrowthFreeqTable$f <- PlantGrowthFreeqTable$Bins +  PlantGrowthFreeqTable$
PlantGrowthFreeqTable$f <- PlantGrowthFreeqTable$Bins + plantGrowthBinWidth
PlantGrowthFreeqTable$f <- PlantGrowthFreeqTable$Bins + plantGrowthBinWidth
PlantGrowthFreeqTable$f <- as.integer(PlantGrowthFreeqTable$Bins) + plantGrowthBinWidth
PlantGrowthFreeqTable
as.integer(PlantGrowthFreeqTable$Bins)
as.numeric(PlantGrowthFreeqTable$Bins)
PlantGrowthFreeqTable$Bins)
PlantGrowthFreeqTable$Bins
class(PlantGrowthFreeqTable$Bins)
levels(PlantGrowthFreeqTable$Bins)
as.numeric(levels(PlantGrowthFreeqTable))
as.numeric(levels(PlantGrowthFreeqTable))[PlantGrowthFreeqTable]
as.numeric(levels(PlantGrowthFreeqTable$Bins))
as.numeric(levels(PlantGrowthFreeqTable$Bins))[PlantGrowthFreeqTable$Bins]
PlantGrowthFreeqTable$Bins <- as.numeric(levels(PlantGrowthFreeqTable$Bins))[PlantGrowthFreeqTable$Bins]
PlantGrowthFreeqTable$f <- PlantGrowthFreeqTable$Bins + plantGrowthBinWidth
PlantGrowthFreeqTable
PlantGrowthFreeqTable$f <- PlantGrowthFreeqTable$Bins + (plantGrowthBinWidth)/2
PlantGrowthFreeqTable
PlantGrowthFreeqTable$Freeq <- as.numeric(levels(PlantGrowthFreeqTable$Freeq))[PlantGrowthFreeqTable$Freeq]
PlantGrowthFreeqTable$f <- PlantGrowthFreeqTable$Bins + (plantGrowthBinWidth)/2
PlantGrowthFreeqTable$fx <- PlantGrowthFreeqTable$f * PlantGrowthFreeqTable$Freeq
PlantGrowthFreeqTable
drop(PlantGrowthFreeqTable)
drop(PlantGrowthFreeqTable)
df_plantGrowth <- data.frame(plantGrowth)
df_plantGrowth <- data.frame(PlantGrowth)
hist(df_plantGrowth$weight)
attach(plantGrowth)
attach(df_plantGrowth)
setwd("C:/Home/Work/GreatLakes/R/HomeWorkOuts")
getwd()
hist(df_plantGrowth$weight)
df_plantGrowth <- data.frame(PlantGrowth)
hist(df_plantGrowth$weight)
hist(df_plantGrowth$weight)
attach(df_plantGrowth)
attach(PlantGrowth)
df_plantGrowth
attach(df_plantGrowth)
cut(weight, 5)
plantGrowth_Bins = ceiling(sqrt(length(weight)))
plantGrowthRange = ceiling(max(weight) - min(weight))
plantGrowthBinWidth = plantGrowthRange/plantGrowth_Bins
plantGrowthClasses = seq(from = min(weight), to=max(weight) , by = plantGrowthBinWidth )
plantGrowthFreeq = cut(weight, plantGrowthClasses)
plantGrowthFreeqTable <- table(planGrowthFreeq)
plantGrowthFreeqTable <- table(plantGrowthFreeq)
names(plantGrowthFreeqTable) <- plantGrowthClasses[-1*(length(plantGrowthClasses))]
plantGrowthFreeqTable <- data.frame(plantGrowthFreeqTable)
names(plantGrowthFreeqTable) <- c("Bins","Freeq")
plantGrowthFreeqTable$Bins <- as.numeric(levels(plantGrowthFreeqTable$Bins))[plantGrowthFreeqTable$Bins]
plantGrowthFreeqTable$Freeq <- as.numeric(levels(plantGrowthFreeqTable$Freeq))[plantGrowthFreeqTable$Freeq]
plantGrowthFreeqTable
attach(df_plantGrowth)
cut(weight, 5)
plantGrowth_Bins = ceiling(sqrt(length(weight)))
plantGrowthRange = ceiling(max(weight) - min(weight))
plantGrowthBinWidth = plantGrowthRange/plantGrowth_Bins
plantGrowthClasses = seq(from = min(weight), to=max(weight) , by = plantGrowthBinWidth )
plantGrowthFreeq = cut(weight, plantGrowthClasses)
plantGrowthFreeqTable <- table(plantGrowthFreeq)
names(plantGrowthFreeqTable) <- plantGrowthClasses[-1*(length(plantGrowthClasses))]
plantGrowthFreeqTable <- data.frame(plantGrowthFreeqTable)
names(plantGrowthFreeqTable) <- c("Bins","Freeq")
plantGrowthFreeqTable$Bins <- as.numeric(levels(plantGrowthFreeqTable$Bins))[plantGrowthFreeqTable$Bins]
plantGrowthFreeqTable
as.numeric(levels(plantGrowthFreeqTable$Freeq))[plantGrowthFreeqTable$Freeq]
class(plantGrowthFreeqTable$Freeq)
plantGrowthFreeqTable$f <- plantGrowthFreeqTable$Bins + (plantGrowthBinWidth)/2
plantGrowthFreeqTable$fx <- plantGrowthFreeqTable$f * plantGrowthFreeqTable$Freeq
plantGrowthFreeqTable
?aggregate
?sum
attach(plantGrowthFreeqTable)
sum(fx)
sum(fx)/sum(Freeq)
print(sum(fx)/sum(Freeq))
print("The Freequency Distribution Mean is" + sum(fx)/sum(Freeq)))
print("The Freequency Distribution Mean is" && sum(fx)/sum(Freeq)))
print("The Freequency Distribution Mean is" +  as.character(sum(fx)/sum(Freeq))))
print("The Freequency Distribution Mean is" +  as.character(sum(fx)/sum(Freeq)))
print(sum(fx)/sum(f))
print(sum(fx)/sum(Freeq))
print("The Freequency Distribution Mean is")
print(sum(fx)/sum(Freeq))
plantGrowthFreeqTable
print("The Freequency Distribution Mean is")
print(sum(fx)/sum(Freeq))
setwd("C:/Home/Work/GreatLakes/R/HomeWorkOuts")
getwd()
df_plantGrowth <- data.frame(PlantGrowth)
hist(df_plantGrowth$weight)
attach(df_plantGrowth)
cut(weight, 5)
plantGrowth_Bins = ceiling(sqrt(length(weight)))
plantGrowthRange = ceiling(max(weight) - min(weight))
plantGrowthBinWidth = plantGrowthRange/plantGrowth_Bins
plantGrowthClasses = seq(from = min(weight), to=max(weight) , by = plantGrowthBinWidth )
plantGrowthFreeq = cut(weight, plantGrowthClasses)
plantGrowthFreeqTable <- table(plantGrowthFreeq)
names(plantGrowthFreeqTable) <- plantGrowthClasses[-1*(length(plantGrowthClasses))]
plantGrowthFreeqTable <- data.frame(plantGrowthFreeqTable)
names(plantGrowthFreeqTable) <- c("Bins","Freeq")
plantGrowthFreeqTable$Bins <- as.numeric(levels(plantGrowthFreeqTable$Bins))[plantGrowthFreeqTable$Bins]
plantGrowthFreeqTable$f <- plantGrowthFreeqTable$Bins + (plantGrowthBinWidth)/2
plantGrowthFreeqTable$fx <- plantGrowthFreeqTable$f * plantGrowthFreeqTable$Freeq
attach(plantGrowthFreeqTable)
plantGrowthFreeqTable
print("The Freequency Distribution Mean is")
print(sum(fx)/sum(Freeq))
udf_FreeqDistrMean <- function(dataset, variables, bin_size){
df_dataset <- data.frame(dataset)
attach(df_dataset)
#Bins = ceiling(sqrt(length(variables)))
Ranges = ceiling(max(variables) - min(variables))
BinWidth = Ranges/bin_size
Bins = seq(from = min(variables), to=max(variables) , by = BinWidth )
Bins_Freeq = cut(variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
Bins_FreeqTable$f <- Bins_FreeqTable$c_Bins + (BinWidth)/2
Bins_FreeqTable$fx <- Bins_FreeqTable$f * Bins_FreeqTable$c_Freeq
attach(Bins_FreeqTable)
return(sum(fx)/sum(c_Freeq))
}
PlantGrowth
udf_FreeqDistrMean(PlantGrowth,weight,5)
udf_FreeqDistrMean(PlantGrowth,weight,3)
udf_FreeqDistrMean(PlantGrowth,weight,10)
udf_FreeqDistrMean <- function(dataset, variables, bin_size){
df_dataset <- data.frame(dataset)
attach(df_dataset)
#Bins = ceiling(sqrt(length(variables)))
Ranges = ceiling(max(variables) - min(variables))
BinWidth = Ranges/bin_size
Bins = seq(from = min(variables), to=max(variables) , by = BinWidth )
Bins_Freeq = cut(variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
Bins_FreeqTable$f <- Bins_FreeqTable$c_Bins + (BinWidth)/2
Bins_FreeqTable$fx <- Bins_FreeqTable$f * Bins_FreeqTable$c_Freeq
detach(df_dataset)
attach(Bins_FreeqTable)
freeq_mean = sum(fx)/sum(c_Freeq)
detach(df_dataset)
detach(Bins_FreeqTable)
return(freeq_mean)
}
udf_FreeqDistrMean(PlantGrowth,weight,10)
search()
searchpaths()
udf_FreeqDistrMean <- function(dataset, variables, bin_size){
df_dataset <- data.frame(dataset)
#Bins = ceiling(sqrt(length(variables)))
Ranges = ceiling(max(df_dataset$variables) - min(df_dataset$variables))
BinWidth = Ranges/bin_size
Bins = seq(from = min(df_dataset$variables), to=max(df_dataset$variables) , by = BinWidth )
Bins_Freeq = cut(df_dataset$variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
Bins_FreeqTable$f <- Bins_FreeqTable$c_Bins + (BinWidth)/2
Bins_FreeqTable$fx <- Bins_FreeqTable$f * Bins_FreeqTable$c_Freeq
freeq_mean = sum(Bins_FreeqTable$fx)/sum(Bins_FreeqTable$c_Freeq)
return(freeq_mean)
}
udf_FreeqDistrMean(PlantGrowth,weight,10)
udf_FreeqDistrMean(PlantGrowth,PlantGrowth$weight,10)
udf_FreeqDistrMean <- function(variables, bin_size){
Ranges = ceiling(max(variables) - min(variables))
BinWidth = Ranges/bin_size
Bins = seq(from = min(variables), to=max(variables) , by = BinWidth )
Bins_Freeq = cut(variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
Bins_FreeqTable$f <- Bins_FreeqTable$c_Bins + (BinWidth)/2
Bins_FreeqTable$fx <- Bins_FreeqTable$f * Bins_FreeqTable$c_Freeq
freeq_mean = sum(Bins_FreeqTable$fx)/sum(Bins_FreeqTable$c_Freeq)
return(freeq_mean)
}
udf_FreeqDistrMean(PlantGrowth$weight,10)
InsectSprays
udf_FreeqDistrMean(InsectSprays$count,10)
mean(InsectSprays$count)
udf_FreeqDistrMean <- function(variables, bin_size, freeqTable){
Ranges = ceiling(max(variables) - min(variables))
BinWidth = Ranges/bin_size
Bins = seq(from = min(variables), to=max(variables) , by = BinWidth )
Bins_Freeq = cut(variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
Bins_FreeqTable$f <- Bins_FreeqTable$c_Bins + (BinWidth)/2
Bins_FreeqTable$fx <- Bins_FreeqTable$f * Bins_FreeqTable$c_Freeq
freeq_mean = sum(Bins_FreeqTable$fx)/sum(Bins_FreeqTable$c_Freeq)
if (freeqTable == 1)
{
return(Bins_FreeqTable)
}
else
{
return(freeq_mean)
}
}
udf_FreeqDistrMean(InsectSprays$count,10)
udf_FreeqDistrMean(InsectSprays$count,10,1)
udf_FreeqDistrMean(InsectSprays$count,10,0)
u_observations <- InsectSprays$count
frequency(u_observations)
u_observations
cut(u_observations,7)
table(cut(u_observations,7))
table(cut(u_observations,10))
variables <- InsectSprays$count
Ranges = ceiling(max(variables) - min(variables))
BinWidth = Ranges/bin_size
Bins = seq(from = min(variables), to=max(variables) , by = BinWidth )
Bins_Freeq = cut(variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
Bins_FreeqTable
variables <- InsectSprays$count
Ranges = ceiling(max(variables) - min(variables))
BinWidth = Ranges/10
Bins = seq(from = min(variables), to=max(variables) , by = BinWidth )
Bins_Freeq = cut(variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
Bins_FreeqTable
udf_FreqDistribution <- function(u_variables, u_bin_size) {
#Freequency Distribution
Ranges = ceiling(max(u_variables) - min(u_variables))
BinWidth = Ranges/u_bin_size
Bins = seq(from = min(u_variables), to=max(u_variables) , by = BinWidth )
Bins_Freeq = cut(u_variables, Bins)
Bins_FreeqTable <- table(Bins_Freeq)
names(Bins_FreeqTable) <- Bins[-1*(length(Bins))]
Bins_FreeqTable <- data.frame(Bins_FreeqTable)
names(Bins_FreeqTable) <- c("c_Bins","c_Freeq")
Bins_FreeqTable$c_Bins <- as.numeric(levels(Bins_FreeqTable$c_Bins))[Bins_FreeqTable$c_Bins]
return(Bins_FreeqTable)
}
udf_FreqDistribution(InsectSprays$count,10)
udf_FreqDistribution(InsectSprays$count,5)
freq_median_tbl <- udf_FreqDistribution(InsectSprays$count,5)
median(freq_median_tbl$c_Bins)
freq_median_tbl$c_Bins[3]
freq_median_tbl$c_Bins[2]
freq_median_tbl$c_Bins[3]-freq_median_tbl$c_Bins[2]
if(length(freq_median_tbl$c_Bins)%%2 == 0)
{
length(freq_median_tbl$c_Bins)%%2
}
if(length(freq_median_tbl$c_Bins)%%2 == 0)
{
print(length(freq_median_tbl$c_Bins)%%2)
}
if(length(freq_median_tbl$c_Bins)%%2 == 0)
{
temp = length(freq_median_tbl$c_Bins)%%2
}
temp
length(freq_median_tbl$c_Bins)%%2
if(length(freq_median_tbl$c_Bins)%%2 == 0)
{
u_median = median(freq_median_tbl$c_Bins)
} else
{
u_median = floor(freq_median_tbl$c_Bins[length(freq_median_tbl$c_Bins)/2])
}
u_median
freq_median_tbl <- udf_FreqDistribution(InsectSprays$count,6)
if(length(freq_median_tbl$c_Bins)%%2 == 0)
{
u_median = median(freq_median_tbl$c_Bins)
} else
{
u_median = floor(freq_median_tbl$c_Bins[length(freq_median_tbl$c_Bins)/2])
}
u_median
freq_median_tbl
if(length(freq_median_tbl$c_Bins)%%2 == 0)
{
u_median = median(freq_median_tbl$c_Bins)
} else
{
u_median = freq_median_tbl$c_Bins[length(freq_median_tbl$c_Bins)/2])
}
if(length(freq_median_tbl$c_Bins)%%2 == 0)
{
u_median = median(freq_median_tbl$c_Bins)
} else
{
u_median = freq_median_tbl$c_Bins[length(freq_median_tbl$c_Bins)/2]
}
freq_median_tbl
u_median
length(freq_median_tbl$c_Bins)/2
freq_median_tbl$c_Bins[3]
if(length(freq_median_tbl$c_Bins)%%2 != 0)
{
u_median = median(freq_median_tbl$c_Bins)
} else
{
u_median = freq_median_tbl$c_Bins[length(freq_median_tbl$c_Bins)/2]
}
freq_median_tbl
u_median
freq_median_tbl <- udf_FreqDistribution(InsectSprays$count,5)
if(length(freq_median_tbl$c_Bins)%%2 != 0)
{
u_median = median(freq_median_tbl$c_Bins)
} else
{
u_median = freq_median_tbl$c_Bins[length(freq_median_tbl$c_Bins)/2]
}
freq_median_tbl
u_median
